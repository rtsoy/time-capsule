// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	domain "time-capsule/internal/domain"

	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, filter bson.M) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, filter)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, filter)
}

// InsertUser mocks base method.
func (m *MockUserRepository) InsertUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), ctx, user)
}

// MockCapsuleRepository is a mock of CapsuleRepository interface.
type MockCapsuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCapsuleRepositoryMockRecorder
}

// MockCapsuleRepositoryMockRecorder is the mock recorder for MockCapsuleRepository.
type MockCapsuleRepositoryMockRecorder struct {
	mock *MockCapsuleRepository
}

// NewMockCapsuleRepository creates a new mock instance.
func NewMockCapsuleRepository(ctrl *gomock.Controller) *MockCapsuleRepository {
	mock := &MockCapsuleRepository{ctrl: ctrl}
	mock.recorder = &MockCapsuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapsuleRepository) EXPECT() *MockCapsuleRepositoryMockRecorder {
	return m.recorder
}

// DeleteCapsule mocks base method.
func (m *MockCapsuleRepository) DeleteCapsule(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCapsule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCapsule indicates an expected call of DeleteCapsule.
func (mr *MockCapsuleRepositoryMockRecorder) DeleteCapsule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCapsule", reflect.TypeOf((*MockCapsuleRepository)(nil).DeleteCapsule), ctx, id)
}

// GetCapsule mocks base method.
func (m *MockCapsuleRepository) GetCapsule(ctx context.Context, filter bson.M) (*domain.Capsule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapsule", ctx, filter)
	ret0, _ := ret[0].(*domain.Capsule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapsule indicates an expected call of GetCapsule.
func (mr *MockCapsuleRepositoryMockRecorder) GetCapsule(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapsule", reflect.TypeOf((*MockCapsuleRepository)(nil).GetCapsule), ctx, filter)
}

// GetCapsules mocks base method.
func (m *MockCapsuleRepository) GetCapsules(ctx context.Context, filter bson.M) ([]*domain.Capsule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapsules", ctx, filter)
	ret0, _ := ret[0].([]*domain.Capsule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapsules indicates an expected call of GetCapsules.
func (mr *MockCapsuleRepositoryMockRecorder) GetCapsules(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapsules", reflect.TypeOf((*MockCapsuleRepository)(nil).GetCapsules), ctx, filter)
}

// InsertCapsule mocks base method.
func (m *MockCapsuleRepository) InsertCapsule(ctx context.Context, capsule *domain.Capsule) (*domain.Capsule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCapsule", ctx, capsule)
	ret0, _ := ret[0].(*domain.Capsule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCapsule indicates an expected call of InsertCapsule.
func (mr *MockCapsuleRepositoryMockRecorder) InsertCapsule(ctx, capsule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCapsule", reflect.TypeOf((*MockCapsuleRepository)(nil).InsertCapsule), ctx, capsule)
}

// UpdateCapsule mocks base method.
func (m *MockCapsuleRepository) UpdateCapsule(ctx context.Context, id primitive.ObjectID, update bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapsule", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCapsule indicates an expected call of UpdateCapsule.
func (mr *MockCapsuleRepositoryMockRecorder) UpdateCapsule(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapsule", reflect.TypeOf((*MockCapsuleRepository)(nil).UpdateCapsule), ctx, id, update)
}
