// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	domain "time-capsule/internal/domain"

	jwt "github.com/golang-jwt/jwt/v5"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, input domain.CreateUserDTO) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, input)
}

// GenerateToken mocks base method.
func (m *MockUserService) GenerateToken(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockUserServiceMockRecorder) GenerateToken(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockUserService)(nil).GenerateToken), ctx, email, password)
}

// ParseToken mocks base method.
func (m *MockUserService) ParseToken(accessToken string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserServiceMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUserService)(nil).ParseToken), accessToken)
}

// MockCapsuleService is a mock of CapsuleService interface.
type MockCapsuleService struct {
	ctrl     *gomock.Controller
	recorder *MockCapsuleServiceMockRecorder
}

// MockCapsuleServiceMockRecorder is the mock recorder for MockCapsuleService.
type MockCapsuleServiceMockRecorder struct {
	mock *MockCapsuleService
}

// NewMockCapsuleService creates a new mock instance.
func NewMockCapsuleService(ctrl *gomock.Controller) *MockCapsuleService {
	mock := &MockCapsuleService{ctrl: ctrl}
	mock.recorder = &MockCapsuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapsuleService) EXPECT() *MockCapsuleServiceMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockCapsuleService) AddImage(ctx context.Context, userID, id primitive.ObjectID, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", ctx, userID, id, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockCapsuleServiceMockRecorder) AddImage(ctx, userID, id, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockCapsuleService)(nil).AddImage), ctx, userID, id, image)
}

// CreateCapsule mocks base method.
func (m *MockCapsuleService) CreateCapsule(ctx context.Context, userID primitive.ObjectID, capsule domain.CreateCapsuleDTO) (*domain.Capsule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCapsule", ctx, userID, capsule)
	ret0, _ := ret[0].(*domain.Capsule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCapsule indicates an expected call of CreateCapsule.
func (mr *MockCapsuleServiceMockRecorder) CreateCapsule(ctx, userID, capsule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCapsule", reflect.TypeOf((*MockCapsuleService)(nil).CreateCapsule), ctx, userID, capsule)
}

// DeleteCapsule mocks base method.
func (m *MockCapsuleService) DeleteCapsule(ctx context.Context, userID, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCapsule", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCapsule indicates an expected call of DeleteCapsule.
func (mr *MockCapsuleServiceMockRecorder) DeleteCapsule(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCapsule", reflect.TypeOf((*MockCapsuleService)(nil).DeleteCapsule), ctx, userID, id)
}

// GetAllCapsules mocks base method.
func (m *MockCapsuleService) GetAllCapsules(ctx context.Context, userID primitive.ObjectID) ([]*domain.Capsule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCapsules", ctx, userID)
	ret0, _ := ret[0].([]*domain.Capsule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCapsules indicates an expected call of GetAllCapsules.
func (mr *MockCapsuleServiceMockRecorder) GetAllCapsules(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCapsules", reflect.TypeOf((*MockCapsuleService)(nil).GetAllCapsules), ctx, userID)
}

// GetCapsuleByID mocks base method.
func (m *MockCapsuleService) GetCapsuleByID(ctx context.Context, userID, id primitive.ObjectID) (*domain.Capsule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapsuleByID", ctx, userID, id)
	ret0, _ := ret[0].(*domain.Capsule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapsuleByID indicates an expected call of GetCapsuleByID.
func (mr *MockCapsuleServiceMockRecorder) GetCapsuleByID(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapsuleByID", reflect.TypeOf((*MockCapsuleService)(nil).GetCapsuleByID), ctx, userID, id)
}

// RemoveImage mocks base method.
func (m *MockCapsuleService) RemoveImage(ctx context.Context, userID, id primitive.ObjectID, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", ctx, userID, id, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockCapsuleServiceMockRecorder) RemoveImage(ctx, userID, id, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockCapsuleService)(nil).RemoveImage), ctx, userID, id, image)
}

// UpdateCapsule mocks base method.
func (m *MockCapsuleService) UpdateCapsule(ctx context.Context, userID, id primitive.ObjectID, update domain.UpdateCapsuleDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapsule", ctx, userID, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCapsule indicates an expected call of UpdateCapsule.
func (mr *MockCapsuleServiceMockRecorder) UpdateCapsule(ctx, userID, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapsule", reflect.TypeOf((*MockCapsuleService)(nil).UpdateCapsule), ctx, userID, id, update)
}
